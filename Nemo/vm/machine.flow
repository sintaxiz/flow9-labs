import vm/structures;
import nemo/converters;
import ds/tree;
import string;

export {    
    executeProg(prog : NemoVmProg) -> void;
}

State(labels: [int], values : Tree<string, NemoVar>);

executeProg(prog : NemoVmProg) {
    values = descriptions2tree(prog.descriptions);
    operators = vmOperators2tree(prog.body);
    switch(lookupTree(operators, 0)) {
        Some(vmOp): {
            println("DEBUG: Start execute prog.");
            executeOperators(vmOp, operators, values);
            println("DEBUG: End execute prog " + toString(prog));
        }
        None(): println("RUNTIME ERROR: Programm does not have 0 label");
    }
}

executeOperators(start : Operator, ops : Tree<int, Operator>, values : Tree<string, NemoVar>) {
    state = executeOperator(start, values);
    if (length(state.labels) != 0) {
        map(state.labels, \l -> {
            switch (lookupTree(ops, l)) {
                Some(op): executeOperators(op, ops, state.values); 
                None(): println("RUNTIME ERROR: No such label " + i2s(l));
            }
        });
    } else {[]};
    println("state after executing operator: " + toString(state));
}

executeOperator(vmOp : Operator, values : Tree<string, NemoVar>) -> State {
    println("DEBUG: Executing operator -- " + toString(vmOp));
    switch (vmOp) {
        AssignmentOp(v, e, l): {
            println("DEBUG: Assignment -- " + v.name + " := " + toString(e) + " goto " + toString(l));
            switch(lookupTree(values, v.name)) {
                Some(nemoVar): State(l, setTree(values, v.name, evaluateExpr(e, values)));
                None(): {
                    println("RUNTIME ERROR: No such variable -- " + v.name);
                    State([], makeTree());
                }
            }
        }
        ConditionOp(cond, lThen, lElse): {
            println("DEBUG: Condition -- " + toString(cond) + " then " + toString(lElse) + " else " + toString(lThen));
            switch (evaluatePredicate(cond, values).val) {
                True(): State(lThen, values);
                False(): State(lElse, values);
            }
        }
    }
}

vmOperators2tree(ops : [VmOperator]) -> Tree<int, Operator> {
     fold(ops, makeTree(), \tree, op ->
        setTree(tree, op.label, op.op));
}

evaluateArExp(l : Expression, r : Expression, op : string, values : Tree<string, NemoVar>) -> NemoInt {
    lExpr = evaluateExpr(l, values);
    rExpr = evaluateExpr(r, values);
    switch (lExpr) {
        NemoInt(lvar): {
            switch (rExpr) {
                NemoInt(rvar): {
                    if (op == "+") {
                        NemoInt(lvar + rvar);
                    }
                    else if (op == "-") {
                        NemoInt(lvar - rvar);
                    }
                    else if (op == "*") {
                        NemoInt(lvar / rvar);
                    }
                    else if (op == "/") {
                        NemoInt(lvar / rvar);
                    } else {
                        NemoInt(0); // unknown op
                    }
                }
                NemoBool(b): NemoInt(0); // error
                NemoVar(v): NemoInt(0); // error
            }
        }
        NemoBool(b): NemoInt(0); // error
        NemoVar(v): NemoInt(0); // error
    }
}

evaluateOper(op : Operand, values : Tree<string, NemoVar>) -> NemoVar {
    switch (op) {
        Int(val): NemoInt(val);
        Var(v): 
        switch(lookupTree(values, v)) {
                Some(nemovar): nemovar;
                None(): NemoInt(0); // error
        };
    }
}

evaluateFuncExp(fexp : FuncExp, values : Tree<string, NemoVar>) -> NemoVar {
    switch (fexp) {
        AppFunc(arr, i): {
            switch(lookupTree(values, arr.name)) {
                Some(nemovar): {
                    switch (nemovar) {
                        NemoArr(array): array[i.val];
                        NemoBool(b): NemoInt(0); // error
                        NemoInt(intval): NemoInt(0); //error
                    }
                }
                None(): NemoInt(0); // error
            }
        }
        UpdFunc(arr, i, v): {
            switch(lookupTree(values, arr.name)) {
                Some(nemovar): {
                    switch (nemovar) {
                        NemoArr(array): NemoArr(replace(array, i.val, evaluateExpr(v, values)));
                        NemoBool(b): NemoInt(0); // error
                        NemoInt(intval): NemoInt(0); //error
                    }
                }
                None(): NemoInt(0); // error
            }
        }
    }
}

evaluatePredicate(cond : Predicate, values : Tree<string, NemoVar>) -> NemoBool {
    lExpr = evaluateExpr(cond.l, values);
    rExpr = evaluateExpr(cond.r, values);
    relSign = cond.relSign;
    switch (lExpr) {
        NemoInt(lvar): {
            switch (rExpr) {
                NemoInt(rvar): {
                    if (relSign == "==") {
                        if (lvar == rvar)   NemoBool(True())
                        else                NemoBool(False());
                    }
                    else if (relSign == ">") {
                        if (lvar > rvar)    NemoBool(True())
                        else                NemoBool(False());
                    }
                    else if (relSign == "<") {
                        if (lvar < rvar)    NemoBool(True())
                        else                NemoBool(False());
                    }
                    else if (relSign == ">=") {
                        if (lvar >= rvar)   NemoBool(True())
                        else                NemoBool(False());
                    }
                    else if (relSign == "<=") {
                        if (lvar <= rvar)   NemoBool(True())
                        else                NemoBool(False());
                    }
                    else NemoBool(False()); // error
                }
                NemoBool(b): NemoBool(False()); // error
                NemoVar(v): NemoBool(False()); // error
            }
        }
        NemoBool(b): NemoBool(False()); // error
        NemoVar(v): NemoBool(False()); // error
    }
}

evaluateExpr(expr : Expression, varValues : Tree<string, NemoVar>) -> NemoVar {
    switch (expr) {
        Operand(): evaluateOper(expr, varValues);
        ArExp(l, r, op): evaluateArExp(l, r, op, varValues);
        FuncExp(): evaluateFuncExp(expr, varValues);
        Predicate(l, r, s): evaluatePredicate(expr, varValues);
    }
}

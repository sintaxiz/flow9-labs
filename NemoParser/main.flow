import maybe;
import nemo/converters;
import string;

emptyDescTest : string = "{} x := 4"
assignmentTest : string = "{var x : int; } x := 5 ";
assignmentArExpTest : string = "{} x := ((4 + 5) * 2)"
choiceTest : string = "{var x : int; } (x := 5 U x := 10)";
iterationTest : string = "{var x : int; } (x := 5)* ";
sequenceTest : string = "{var x : int; } (x := 5; x := 2)"
testTest : string = "{var x : int; } ((x > y))?";

appTest : string = "{var x : [int]; } x := APP(x,1)"
updTest : string = "{var x : [int]; } x := UPD(x,1, 1)"

testsP : [Pair] = [ Pair(emptyDescTest, "emptyDescTest"),
                    Pair(assignmentTest, "emptyDescTest"),
                    Pair(assignmentArExpTest, "emptyDescTest"),
                    Pair(choiceTest, "emptyDescTest"),
                    Pair(iterationTest, "emptyDescTest"),
                    Pair(sequenceTest, "emptyDescTest"),
                    Pair(testTest, "emptyDescTest"),
                    Pair(appTest, "emptyDescTest"),
                    Pair(updTest, "emptyDescTest")
                  ];

runTest(nemoProg : string) {
  switch (s2nemo(nemoProg)) {
        Some(res): {
            println(res);
            println(nemo2s(res));
        }
        None(): {
            println("cannot parse program...");
        }
    }
}

main() {
    map(testsP, \t -> {
        switch (t : Pair) {
            Pair(test, testName): {
                println("test: " + testName);
                runTest(test);
                println("------------------------------------------");
            }
        }
    });
  
}